#!/bin/bash
#! /bin/bash

# 顏色設定
RED="\033[1;31m"
GREEN="\033[1;32m"
YELLOW="\033[1;33m"
BLUE="\033[1;34m"
WHITE="\033[0m"

package_check() {
    local cmd=$1
    local pkg=${2:-$1}  # Use second parameter as package name, or default to command name
    
    if ! command -v ${cmd} 1>/dev/null; then
        read -r -e -p "本腳本需要安裝 ${cmd}，請確認是否安裝並繼續執行？(Y/N)：" continue
        case $continue in
            Y | y)
                brew install ${pkg} ;;
            N | n)
                echo -e "${RED}未安裝 ${cmd}，退出腳本${WHITE}"
                exit 1 ;;
            *)
                echo -e "${RED}無效參數 ($REPLY)，請重新輸入${WHITE}"
                exit 1 ;;
        esac
    fi
}

commands=("kubectl" "fzf")
packages=("kubectl" "fzf")

for i in "${!commands[@]}"; do
    cmd="${commands[$i]}"
    pkg="${packages[$i]}"
    package_check "${cmd}" "${pkg}"
done

# 顯示幫助訊息
show_help() {
    echo -e "${BLUE}ktx - Kubernetes Context 切換工具${NC}"
    echo "用法:"
    echo "  ktx                   - 互動式選擇並切換 Kubernetes Context"
    echo "  ktx <context-name>    - 直接切換到指定的 Context"
    echo "  ktx -l, --list        - 列出所有可用的 Context"
    echo "  ktx -c, --current     - 顯示當前使用的 Context"
    echo "  ktx -h, --help        - 顯示此幫助訊息"
}

# 獲取所有可用的 Context
ktx_contexts() {
    kubectl config get-contexts -o name
}

# 獲取當前 Context
ktx_current_context() {
    kubectl config current-context
}

# 主函數
ktx() {
    # 處理命令行參數
    case "$1" in
        "-h"|"--help")
            show_help
            return 0
            ;;
        "-l"|"--list")
            echo -e "${BLUE}可用的 Kubernetes Contexts:${NC}"
            contexts=$(ktx_contexts)
            current=$(ktx_current_context)
            echo "$contexts" | while read -r ctx; do
                if [ "$ctx" = "$current" ]; then
                    echo -e "${GREEN}* $ctx${NC}"
                else
                    echo "$ctx"
                fi
            done
            return 0
            ;;
        "-c"|"--current")
            current=$(ktx_current_context)
            echo -e "當前 Context: ${GREEN}$current${NC}"
            return 0
            ;;
        "")
            # 無參數時執行互動式選擇
            contexts=$(ktx_contexts)
            current=$(ktx_current_context)
            
            # 使用 fzf 讓用戶選擇 Context
            # 預先選中當前 Context
            context=$(echo "$contexts" | fzf --prompt="👆 請選擇 kubeContext：")
            
            if [ -z "$context" ]; then
                echo -e "${RED}未選擇 kubeContext，操作取消${NC}"
                return 1
            fi
            
            # 如果選擇的 Context 與當前相同，則不做任何操作
            if [ "$context" = "$current" ]; then
                echo -e "${YELLOW}已經在使用 Context: $context${NC}"
                return 0
            fi
            
            # 切換到選中的 Context
            kubectl config use-context "$context"
            if [ $? -eq 0 ]; then
                echo -e "${GREEN}已切換到 Context: $context${NC}"
            else
                echo -e "${RED}切換失敗${NC}"
                return 1
            fi
            ;;
        *)
            # 直接切換到指定的 Context
            specified_context="$1"
            
            # 檢查指定的 Context 是否存在
            if ! kubectl config get-contexts "$specified_context" &>/dev/null; then
                echo -e "${RED}錯誤: Context '$specified_context' 不存在${NC}"
                echo "可用的 Contexts:"
                ktx_contexts
                return 1
            fi
            
            # 切換 Context
            kubectl config use-context "$specified_context"
            if [ $? -eq 0 ]; then
                echo -e "${GREEN}已切換到 Context: $specified_context${NC}"
            else
                echo -e "${RED}切換失敗${NC}"
                return 1
            fi
            ;;
    esac
}

# 如果直接執行此腳本，則調用 ktx 函數
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    ktx "$@"
fi